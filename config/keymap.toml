# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]

keymap = [
	# Hopping
	{ on = "i", run = "arrow -1", desc = "Move cursor up" },
	{ on = "n", run = "arrow 1",  desc = "Move cursor down" },
	{ on = "y", run = "leave", desc = "Go back to the parent directory" },
	{ on = "o", run = "enter", desc = "Enter the child directory" },
	{ on = "<C-o>", run = "back",    desc = "Go back to the previous directory" },
	{ on = "<C-i>", run = "forward", desc = "Go forward to the next directory" },
	# Toggle
	{ on = "<Space>", run = [ "toggle", "arrow 1" ], desc = "Toggle the current selection state" },
	{ on = "<C-a>",   run = "toggle_all --state=on", desc = "Select all files" },
	{ on = "<C-r>",   run = "toggle_all",            desc = "Invert selection of all files" },

	# Visual mode
	{ on = "v", run = "visual_mode",         desc = "Enter visual mode (selection mode)" },
	{ on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },

	# Seeking
	{ on = "I", run = "seek -5", desc = "Seek up 5 units in the preview" },
	{ on = "N", run = "seek 5",  desc = "Seek down 5 units in the preview" },

	# Operation
	{ on = "l",         run = "open",                        desc = "Open selected files" },
	{ on = "L",         run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = "j",         run = "yank",                        desc = "Yank selected files (copy)" },
	{ on = "h",         run = "paste",                       desc = "Paste yanked files" },
	{ on = "H",         run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = "J",         run = "unyank",                      desc = "Cancel the yank status" },
	{ on = "e",         run = "remove",                      desc = "Trash selected files" },
	{ on = "E",         run = "remove --permanently",        desc = "Permanently delete selected files" },
	{ on = "a",         run = "create",                      desc = "Create a file (ends with / for directories)" },
	{ on = "f",         run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
	{ on = "<C-s>",     run = "escape --search",             desc = "Cancel the ongoing search" },

	# Filter
	{ on = "t", run = "filter --smart", desc = "Filter files" },

	# Find
	{ on = "/", run = "find --smart",            desc = "Find next file" },
	{ on = "?", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "p", run = "find_arrow",              desc = "Goto the next found" },
	{ on = "P", run = "find_arrow --previous",   desc = "Goto the previous found" },

	# Tabs
	{ on = "<C-t>", run = "tab_create --current", desc = "Create a new tab with CWD" },
]

[tasks]

keymap = [
	{ on = "n", run = "arrow -1", desc = "Move cursor up" },
	{ on = "i", run = "arrow 1",  desc = "Move cursor down" },
]

[spot]

keymap = [
	{ on = "i", run = "arrow -1", desc = "Move cursor up" },
	{ on = "n", run = "arrow 1",  desc = "Move cursor down" },
	{ on = "y", run = "swipe -1", desc = "Swipe to the previous file" },
	{ on = "o", run = "swipe 1",  desc = "Swipe to the next file" },
]

[pick]

keymap = [
	{ on = "i", run = "arrow -1", desc = "Move cursor up" },
	{ on = "n", run = "arrow 1",  desc = "Move cursor down" },
]

[input]

keymap = [
	# Mode
	{ on = "r", run = "insert",                             desc = "Enter insert mode" },
	{ on = "R", run = [ "move first-char", "insert" ],      desc = "Move to the BOL, and enter insert mode" },
	{ on = "f", run = "replace",                            desc = "Replace a single character" },

	# Character-wise movement
	{ on = "y",       run = "move -1", desc = "Move back a character" },
	{ on = "o",       run = "move 1",  desc = "Move forward a character" },
	{ on = "<C-b>",   run = "move -1", desc = "Move back a character" },
	{ on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

	# Word-wise movement
	{ on = "d",     run = "forward --end-of-word",       desc = "Move forward to the end of the current or next word" },
	{ on = "D",     run = "forward --far --end-of-word", desc = "Move forward to the end of the current or next WORD" },

	# Line-wise movement
	{ on = ["g", "s"],      run = "move first-char", desc = "Move to the first non-whitespace character" },
	{ on = ["g", "l"],      run = "move first-char", desc = "Move to the first non-whitespace character" },

	# Cut/Yank/Paste
	{ on = "e", run = "delete --cut",                              desc = "Cut the selected characters" },
	{ on = "E", run = [ "delete --cut", "move eol" ],              desc = "Cut until the EOL" },
	{ on = "j", run = "yank",                                      desc = "Copy the selected characters" },
	{ on = "h", run = "paste",                                     desc = "Paste the copied characters after the cursor" },
	{ on = "H", run = "paste --before",                            desc = "Paste the copied characters before the cursor" },
]

[confirm]

keymap = [
	{ on = "x", run = "close",          desc = "Cancel the confirm" },

	{ on = "n", run = "arrow -1", desc = "Move cursor up" },
	{ on = "i", run = "arrow 1",  desc = "Move cursor down" },
]

[help]

keymap = [
	# Navigation
	{ on = "i", run = "arrow -1", desc = "Move cursor up" },
	{ on = "n", run = "arrow 1",  desc = "Move cursor down" },
	# Filtering
	{ on = "t", run = "filter", desc = "Apply a filter for the help items" },
]
